{"version":3,"sources":["Html5QrcodePlugin.jsx","components/Header.js","ResultDrawer.tsx","App.js","reportWebVitals.js","index.js"],"names":["qrcodeRegionId","Html5QrcodePlugin","id","this","html5QrcodeScanner","clear","catch","error","console","config","props","fps","qrbox","aspectRatio","undefined","disableFlip","formatsToSupport","createConfig","verbose","qrCodeSuccessCallback","Html5QrcodeScanner","render","qrCodeErrorCallback","React","Component","Header","title","Toolbar","sx","borderBottom","borderColor","Typography","component","variant","color","align","noWrap","flex","Root","styled","theme","height","backgroundColor","palette","mode","grey","background","default","StyledBox","Box","Puller","width","borderRadius","position","top","left","ButtonBox","SwipeableEdgeDrawer","window","results","open","setOpen","toggleDrawer","newOpen","container","document","body","CssBaseline","styles","overflow","SwipeableDrawer","anchor","onClose","onOpen","swipeAreaWidth","disableSwipeToOpen","ModalProps","keepMounted","borderTopLeftRadius","borderTopRightRadius","visibility","right","p","length","px","pb","List","map","result","index","ResultList","decodedText","Button","nama","setNama","jumlah","setJumlah","fetch","then","response","json","value","nama_item","ListItem","disablePadding","ListItemButton","ListItemText","primary","primaryTypographyProps","style","whiteSpace","textOverflow","ButtonGroup","size","onClick","disabled","App","state","onNewScanResult","bind","className","decodedResult","log","setState","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9d1056a9.chunk.js","sourcesContent":["import { Html5QrcodeScanner } from \"html5-qrcode\";\nimport React from 'react';\n\nconst qrcodeRegionId = \"html5qr-code-full-region\";\n\nclass Html5QrcodePlugin extends React.Component {\n    render() {\n        return <div id={qrcodeRegionId} />;\n    }\n\n    componentWillUnmount() {\n        // TODO(mebjas): See if there is a better way to handle\n        //  promise in `componentWillUnmount`.\n        this.html5QrcodeScanner.clear().catch(error => {\n            console.error(\"Failed to clear html5QrcodeScanner. \", error);\n        });\n    }\n\n    componentDidMount() {\n        // Creates the configuration object for Html5QrcodeScanner.\n        function createConfig(props) {\n            var config = {};\n            if (props.fps) {\n            config.fps = props.fps;\n            }\n            if (props.qrbox) {\n            config.qrbox = props.qrbox;\n            }\n            if (props.aspectRatio) {\n            config.aspectRatio = props.aspectRatio;\n            }\n            if (props.disableFlip !== undefined) {\n            config.disableFlip = props.disableFlip;\n            }\n            if (props.formatsToSupport) {\n                config.formatsToSupport = props.formatsToSupport\n            }\n            return config;\n        }\n\n        var config = createConfig(this.props);\n        var verbose = this.props.verbose === true;\n\n        // Suceess callback is required.\n        if (!(this.props.qrCodeSuccessCallback )) {\n            throw \"qrCodeSuccessCallback is required callback.\";\n        }\n\n        this.html5QrcodeScanner = new Html5QrcodeScanner(\n            qrcodeRegionId, config, verbose);\n        this.html5QrcodeScanner.render(\n            this.props.qrCodeSuccessCallback,\n            this.props.qrCodeErrorCallback);\n    }\n};\n\nexport default Html5QrcodePlugin;\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nfunction Header(props) {\n  const { title } = props;\n\n  return (\n    <React.Fragment>\n      <Toolbar sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Typography\n          component=\"h2\"\n          variant=\"h5\"\n          color=\"inherit\"\n          align=\"center\"\n          noWrap\n          sx={{ flex: 1 }}\n        >\n          {title}\n        </Typography>\n\n        \n      </Toolbar>\n      \n    </React.Fragment>\n  );\n}\n\nHeader.propTypes = {\n\n  title: PropTypes.string.isRequired,\n};\n\nexport default Header;","import * as React from 'react';\nimport { Global } from '@emotion/react';\nimport { styled } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { grey } from '@mui/material/colors';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport SwipeableDrawer from '@mui/material/SwipeableDrawer';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport { Button, ButtonGroup } from '@mui/material';\nconst drawerBleeding = 56;\n\ninterface Props {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window?: () => Window;\n  results: String[];\n}\n\nconst Root = styled('div')(({ theme }) => ({\n  height: '100%',\n  backgroundColor:\n    theme.palette.mode === 'light' ? grey[100] : theme.palette.background.default,\n}));\n\nconst StyledBox = styled(Box)(({ theme }) => ({\n  backgroundColor: theme.palette.mode === 'light' ? '#fff' : grey[800],\n}));\n\nconst Puller = styled(Box)(({ theme }) => ({\n  width: 30,\n  height: 6,\n  backgroundColor: theme.palette.mode === 'light' ? grey[300] : grey[900],\n  borderRadius: 3,\n  position: 'absolute',\n  top: 8,\n  left: 'calc(50% - 15px)',\n}));\n\nconst ButtonBox = styled('div')(({ theme }) => ({\n  width: 30,\n  height: 80,\n  position: 'absolute',\n  top: 8,\n  left: 'calc(50% - 15px)',\n}));\n\nexport default function SwipeableEdgeDrawer(props: Props) {\n  const { window, results } = props;\n  const [open, setOpen] = React.useState(false);\n\n  const toggleDrawer = (newOpen: boolean) => () => {\n    setOpen(newOpen);\n  };\n\n  // This is used only for the example\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <Root>\n      <CssBaseline />\n      <Global\n        styles={{\n          '.MuiDrawer-root > .MuiPaper-root': {\n            height: `calc(100% - ${drawerBleeding}px)`,\n            overflow: 'visible',\n          },\n        }}\n      />\n      <SwipeableDrawer\n        container={container}\n        anchor=\"bottom\"\n        open={open}\n        onClose={toggleDrawer(false)}\n        onOpen={toggleDrawer(true)}\n        swipeAreaWidth={drawerBleeding}\n        disableSwipeToOpen={false}\n        ModalProps={{\n          keepMounted: true,\n        }}\n      >\n        <StyledBox\n\n          sx={{\n            position: 'absolute',\n            top: -drawerBleeding,\n            borderTopLeftRadius: 8,\n            borderTopRightRadius: 8,\n            visibility: 'visible',\n            right: 0,\n            left: 0,\n          }}\n        >\n          <Puller />\n          <Typography sx={{ p: 2, color: 'text.secondary' }}>{results.length} items</Typography>\n        </StyledBox>\n        <StyledBox\n          sx={{\n            px: 2,\n            pb: 2,\n            height: '100%',\n            overflow: 'auto',\n          }}\n        >\n          {/* <Skeleton variant=\"rectangular\" height=\"100%\" /> */}\n          <List>\n            {results.map((result, index) => (\n              <ResultList decodedText={result} index={index} />\n              // <ListItem key={index} disablePadding>\n              //   <ListItemButton>\n              //     <ListItemText primary={index} />\n              //     <ListItemText primary={result.decodedText} />\n              //   </ListItemButton>\n              // </ListItem>\n            ))}\n          </List>\n          <ButtonBox>\n            <Button variant=\"contained\">Bayar</Button>\n          </ButtonBox>\n        </StyledBox>\n      </SwipeableDrawer>\n    </Root>\n  );\n}\n\ninterface ResultProps {\n  decodedText: String;\n  index: number;\n}\n\nfunction ResultList(props: ResultProps) {\n  const { decodedText, index } = props;\n  const [nama, setNama] = React.useState(\"Not Registered\")\n  const [jumlah, setJumlah] = React.useState(1)\n  React.useEffect(() => {\n    fetch(`https://payit.pythonanywhere.com/products/${decodedText}`).then((response) => response.json().then((value) => {\n      if (value.nama_item) {\n        setNama(value.nama_item)\n      }\n    }\n    ))\n  }, [])\n  return (\n    <ListItem key={index} disablePadding>\n      <ListItemButton>\n        <ListItemText primary={nama} primaryTypographyProps={{\n          variant: 'subtitle2',\n          style: {\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis'\n          }\n        }} />\n        {/* <ListItemText primary={jumlah} /> */}\n      </ListItemButton>\n      <ButtonGroup>\n        <Button size='small' onClick={() => setJumlah(jumlah - 1)}>-</Button>\n        <Button disabled size='small'>{jumlah}</Button>\n        <Button size='small' onClick={() => setJumlah(jumlah + 1)}>+</Button>\n      </ButtonGroup>\n    </ListItem>\n  )\n}","import './App.css';\n\nimport React from 'react';\nimport Html5QrcodePlugin from './Html5QrcodePlugin.jsx'\nimport Header from './components/Header';\nimport SwipeableEdgeDrawer from './ResultDrawer';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      decodedText: []\n    }\n\n    // This binding is necessary to make `this` work in the callback.\n    this.onNewScanResult = this.onNewScanResult.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header title='Pay!t' />\n        <section className=\"App-section\">\n          <br />\n          <br />\n          <Html5QrcodePlugin\n            fps={30}\n            qrbox={250}\n            disableFlip={false}\n            qrCodeSuccessCallback={this.onNewScanResult}\n            formatsToSupport={[9]}\n          />\n          {/* <ResultContainerPlugin results={this.state.decodedResults} /> */}\n        </section>\n        <SwipeableEdgeDrawer results={this.state.decodedText} />\n      </div>\n    );\n  }\n\n  onNewScanResult(decodedText, decodedResult) {\n    console.log(\n      \"App [result]\", decodedResult);\n\n    // let decodedResults = this.state.decodedResults;\n    // decodedResults.push(decodedResult);\n    this.setState((state, props) => {\n      if (state.decodedText[state.decodedText.length - 1] !== decodedText) {\n        state.decodedText.push(decodedText);\n        return state\n      }\n    });\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}