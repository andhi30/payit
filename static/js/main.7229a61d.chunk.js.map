{"version":3,"sources":["Html5QrcodePlugin.jsx","ResultContainerPlugin.jsx","HowToUse.jsx","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["qrcodeRegionId","Html5QrcodePlugin","id","this","html5QrcodeScanner","clear","catch","error","console","config","props","fps","qrbox","aspectRatio","undefined","disableFlip","createConfig","verbose","qrCodeSuccessCallback","Html5QrcodeScanner","render","qrCodeErrorCallback","React","Component","filterResults","results","filteredResults","i","length","decodedText","push","ResultContainerTable","data","className","map","result","log","format","formatName","ResultContainerPlugin","Header","title","Toolbar","sx","borderBottom","borderColor","Typography","component","variant","color","align","noWrap","flex","App","state","decodedResults","onNewScanResult","bind","decodedResult","setState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7229a61d.chunk.js","sourcesContent":["import { Html5QrcodeScanner } from \"html5-qrcode\";\nimport React from 'react';\n\nconst qrcodeRegionId = \"html5qr-code-full-region\";\n\nclass Html5QrcodePlugin extends React.Component {\n    render() {\n        return <div id={qrcodeRegionId} />;\n    }\n\n    componentWillUnmount() {\n        // TODO(mebjas): See if there is a better way to handle\n        //  promise in `componentWillUnmount`.\n        this.html5QrcodeScanner.clear().catch(error => {\n            console.error(\"Failed to clear html5QrcodeScanner. \", error);\n        });\n    }\n\n    componentDidMount() {\n        // Creates the configuration object for Html5QrcodeScanner.\n        function createConfig(props) {\n            var config = {};\n            if (props.fps) {\n            config.fps = props.fps;\n            }\n            if (props.qrbox) {\n            config.qrbox = props.qrbox;\n            }\n            if (props.aspectRatio) {\n            config.aspectRatio = props.aspectRatio;\n            }\n            if (props.disableFlip !== undefined) {\n            config.disableFlip = props.disableFlip;\n            }\n            return config;\n        }\n\n        var config = createConfig(this.props);\n        var verbose = this.props.verbose === true;\n\n        // Suceess callback is required.\n        if (!(this.props.qrCodeSuccessCallback )) {\n            throw \"qrCodeSuccessCallback is required callback.\";\n        }\n\n        this.html5QrcodeScanner = new Html5QrcodeScanner(\n            qrcodeRegionId, config, verbose);\n        this.html5QrcodeScanner.render(\n            this.props.qrCodeSuccessCallback,\n            this.props.qrCodeErrorCallback);\n    }\n};\n\nexport default Html5QrcodePlugin;\n","import React from 'react';\n\nfunction filterResults(results) {\n    let filteredResults = [];\n    for (var i = 0; i < results.length; ++i) {\n        if (i === 0) {\n            filteredResults.push(results[i]);\n            continue;\n        }\n\n        if (results[i].decodedText !== results[i-1].decodedText) {\n            filteredResults.push(results[i]);\n        }\n    }\n    return filteredResults;\n}\n\nclass ResultContainerTable extends React.Component {\n    render() {\n        var results = filterResults(this.props.data);\n        return (\n            <table className={'Qrcode-result-table'}>\n                <thead>\n                    <tr>\n                        <td>#</td>\n                        <td>Decoded Text</td>\n                        <td>Format</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        results.map((result, i) => {\n                            console.log(result);\n                            return (<tr key={i}>\n                                <td>{i}</td>\n                                <td>{result.decodedText}</td>\n                                <td>{result.result.format.formatName}</td>\n                            </tr>);\n                        })\n                    }\n                </tbody>\n            </table>\n        );\n    }\n}\n\nclass ResultContainerPlugin extends React.Component {\n    render() { \n        let results = filterResults(this.props.results);\n        return (<div className='Result-container'>\n                <div className='Result-header'>Scanned results ({results.length})</div>\n                <div className='Result-section'>\n                    <ResultContainerTable data={this.props.results} />\n                </div>\n            </div>);\n    }\n}\n\nexport default ResultContainerPlugin;","import React from 'react';\n\nclass HowToUse extends React.Component {\n    render() {\n        return (<div className='App-info-section'>\n        <h3>How to use?</h3>\n        <div>\n          Check out&nbsp;\n          <a href=\"https://github.com/scanapp-org/html5-qrcode-react\">\n          scanapp-org/html5-qrcode-react\n          </a>&nbsp;\n          on Github for reference.\n          <br />\n          <br />\n          Built using&nbsp;\n          <a href=\"https://github.com/mebjas/html5-qrcode\">\n          mebjas/html5-qrcode\n          </a>.\n          <br />\n          <br />\n          Free QR code scanner and barcode scanner at <a href=\"https://scanapp.org\">scanapp.org</a>.\n        </div>\n      </div>);\n    }\n}\n\nexport default HowToUse;","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nfunction Header(props) {\n  const { title } = props;\n\n  return (\n    <React.Fragment>\n      <Toolbar sx={{ borderBottom: 1, borderColor: 'divider' }}>\n        <Typography\n          component=\"h2\"\n          variant=\"h5\"\n          color=\"inherit\"\n          align=\"center\"\n          noWrap\n          sx={{ flex: 1 }}\n        >\n          {title}\n        </Typography>\n\n        \n      </Toolbar>\n      \n    </React.Fragment>\n  );\n}\n\nHeader.propTypes = {\n\n  title: PropTypes.string.isRequired,\n};\n\nexport default Header;","import './App.css';\n\nimport React from 'react';\nimport Html5QrcodePlugin from './Html5QrcodePlugin.jsx'\nimport ResultContainerPlugin from './ResultContainerPlugin.jsx'\nimport HowToUse from './HowToUse.jsx'\nimport Header from './components/Header';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      decodedResults: []\n    }\n\n    // This binding is necessary to make `this` work in the callback.\n    this.onNewScanResult = this.onNewScanResult.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header title='Pay!t'/>\n        <section className=\"App-section\">\n          <br />\n          <br />\n          <br />\n          <Html5QrcodePlugin \n            fps={10}\n            qrbox={200}\n            disableFlip={false}\n            qrCodeSuccessCallback={this.onNewScanResult}/>\n          <ResultContainerPlugin results={this.state.decodedResults} />\n        </section>\n      </div>\n    );\n  }\n\n  onNewScanResult(decodedText, decodedResult) {\n    console.log(\n      \"App [result]\", decodedResult);\n\n    // let decodedResults = this.state.decodedResults;\n    // decodedResults.push(decodedResult);\n    this.setState((state, props) => {\n      state.decodedResults.push(decodedResult);\n      return state;\n    });\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}